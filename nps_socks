#!/bin/bash

DEFAULT_START_PORT=23049
DEFAULT_SOCKS_USERNAME="socks@admin"
DEFAULT_SOCKS_PASSWORD="1234567890"
DEFAULT_WS_PATH="/ws"
DEFAULT_UUID=$(cat /proc/sys/kernel/random/uuid)
DEFAULT_EXPIRE_DAYS=30

IP_ADDRESSES=($(hostname -I))
STATS_FILE="/etc/xrayL/ip_stats.json"
NPS_OUTPUT_FILE="/var/www/html/nps_stats.txt"

install_dependencies() {
    echo "安装依赖..."
    apt-get update || yum update -y
    apt-get install -y jq curl unzip || yum install -y jq curl unzip
}

install_xray() {
    echo "安装 Xray..."
    install_dependencies
    wget https://github.com/XTLS/Xray-core/releases/download/v25.1.30/Xray-linux-64.zip
    unzip Xray-linux-64.zip
    mv xray /usr/local/bin/xrayL
    chmod +x /usr/local/bin/xrayL
    
    # 初始化统计文件
    [ -f "$STATS_FILE" ] || echo "[]" > "$STATS_FILE"
    
    cat <<EOF >/etc/systemd/system/xrayL.service
[Unit]
Description=XrayL Service
After=network.target

[Service]
ExecStart=/usr/local/bin/xrayL -c /etc/xrayL/config.toml
Restart=on-failure
User=nobody
RestartSec=3

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable xrayL
    systemctl start xrayL
    echo "Xray 安装完成."
}

generate_base_config() {
    cat <<EOF >/etc/xrayL/config.toml
[stats]
[[stats.rules]]
type = "user"
inboundTag = ["tag_*"]
outboundTag = ["tag_*"]

[api]
services = ["StatsService"]
tag = "api"

[[api.settings]]
address = "127.0.0.1"
port = 10085

EOF
}

update_stats() {
    local tag=$1
    local ip=$2
    local port=$3
    local expire_date=$4
    
    existing=$(jq --arg tag "$tag" '.[] | select(.tag == $tag)' "$STATS_FILE")
    if [ -z "$existing" ]; then
        jq --argjson new_entry "{ \
            \"tag\": \"$tag\", \
            \"ip\": \"$ip\", \
            \"port\": $port, \
            \"start_time\": \"$(date +%Y-%m-%d)\", \
            \"expire_time\": \"$expire_date\", \
            \"upload\": 0, \
            \"download\": 0 \
        }" '. += [$new_entry]' "$STATS_FILE" > tmp.json && mv tmp.json "$STATS_FILE"
    fi
}

config_xray() {
    config_type=$1
    mkdir -p /etc/xrayL
    
    generate_base_config
    
    read -p "起始端口 (默认 $DEFAULT_START_PORT): " START_PORT
    START_PORT=${START_PORT:-$DEFAULT_START_PORT}
    
    if [ "$config_type" == "socks" ]; then
        read -p "SOCKS 账号 (默认 $DEFAULT_SOCKS_USERNAME): " SOCKS_USERNAME
        SOCKS_USERNAME=${SOCKS_USERNAME:-$DEFAULT_SOCKS_USERNAME}
        read -p "SOCKS 密码 (默认 $DEFAULT_SOCKS_PASSWORD): " SOCKS_PASSWORD
        SOCKS_PASSWORD=${SOCKS_PASSWORD:-$DEFAULT_SOCKS_PASSWORD}
    elif [ "$config_type" == "vmess" ]; then
        read -p "UUID (默认随机): " UUID
        UUID=${UUID:-$DEFAULT_UUID}
        read -p "WebSocket 路径 (默认 $DEFAULT_WS_PATH): " WS_PATH
        WS_PATH=${WS_PATH:-$DEFAULT_WS_PATH}
    fi
    
    read -p "有效期天数 (默认 $DEFAULT_EXPIRE_DAYS): " EXPIRE_DAYS
    EXPIRE_DAYS=${EXPIRE_DAYS:-$DEFAULT_EXPIRE_DAYS}
    expire_date=$(date -d "+${EXPIRE_DAYS} days" +%Y-%m-%d)
    
    config_content=""
    for ((i = 0; i < ${#IP_ADDRESSES[@]}; i++)); do
        current_port=$((START_PORT + i))
        current_tag="tag_$((i + 1))"
        current_ip=${IP_ADDRESSES[i]}
        
        # 更新统计信息
        update_stats "$current_tag" "$current_ip" "$current_port" "$expire_date"
        
        config_content+="[[inbounds]]\n"
        config_content+="port = $current_port\n"
        config_content+="protocol = \"$config_type\"\n"
        config_content+="tag = \"$current_tag\"\n"
        config_content+="[inbounds.settings]\n"
        
        if [ "$config_type" == "socks" ]; then
            config_content+="auth = \"password\"\n"
            config_content+="udp = true\n"
            config_content+="ip = \"$current_ip\"\n"
            config_content+="[[inbounds.settings.accounts]]\n"
            config_content+="user = \"$SOCKS_USERNAME\"\n"
            config_content+="pass = \"$SOCKS_PASSWORD\"\n"
        elif [ "$config_type" == "vmess" ]; then
            config_content+="[[inbounds.settings.clients]]\n"
            config_content+="id = \"$UUID\"\n"
            config_content+="[inbounds.streamSettings]\n"
            config_content+="network = \"ws\"\n"
            config_content+="[inbounds.streamSettings.wsSettings]\n"
            config_content+="path = \"$WS_PATH\"\n"
        fi
        
        config_content+="[[outbounds]]\n"
        config_content+="sendThrough = \"$current_ip\"\n"
        config_content+="protocol = \"freedom\"\n"
        config_content+="tag = \"$current_tag\"\n"
        
        config_content+="[[routing.rules]]\n"
        config_content+="type = \"field\"\n"
        config_content+="inboundTag = \"$current_tag\"\n"
        config_content+="outboundTag = \"$current_tag\"\n\n"
    done
    
    echo -e "$config_content" >>/etc/xrayL/config.toml
    systemctl restart xrayL
    
    # 添加统计脚本
    cat <<'EOF' >/usr/local/bin/xray_stats.sh
#!/bin/bash
API_URL="http://127.0.0.1:10085"
STATS_FILE="/etc/xrayL/ip_stats.json"

# 获取统计数据
stats=$(curl -s "$API_URL/stats?pattern=user>>>" | jq -r '.stat[] | select(.name | endswith(":uplink") or endswith(":downlink")) | "\(.name)=\(.value)"')

declare -A uploads
declare -A downloads

while IFS="=" read -r name value; do
    tag=$(echo "$name" | cut -d':' -f1)
    type=$(echo "$name" | cut -d':' -f2)
    if [ "$type" == "uplink" ]; then
        uploads["$tag"]=$value
    elif [ "$type" == "downlink" ]; then
        downloads["$tag"]=$value
    fi
done <<< "$stats"

# 更新统计文件
jq --argjson uploads "$(declare -p uploads | jq -c)" --argjson downloads "$(declare -p downloads | jq -c)" '
    .[] |= (
        .tag as $tag |
        .upload = ($uploads[$tag] // 0) |
        .download = ($downloads[$tag] // 0)
    )' "$STATS_FILE" > tmp.json && mv tmp.json "$STATS_FILE"

# 生成NPS输出
jq -r '.[] | "IP: \(.ip), Port: \(.port), Upload: \(.upload), Download: \(.download), Expiry: \(.expire_time)"' "$STATS_FILE" > "$NPS_OUTPUT_FILE"
EOF

    chmod +x /usr/local/bin/xray_stats.sh
    (crontab -l 2>/dev/null; echo "*/5 * * * * /usr/local/bin/xray_stats.sh") | crontab -
    
    echo "配置完成！"
    echo "IP数量: ${#IP_ADDRESSES[@]}"
    echo "起始端口: $START_PORT"
    echo "结束端口: $((START_PORT + ${#IP_ADDRESSES[@]} - 1))"
    [ "$config_type" == "socks" ] && echo "用户名: $SOCKS_USERNAME" && echo "密码: $SOCKS_PASSWORD"
    [ "$config_type" == "vmess" ] && echo "UUID: $UUID" && echo "WS路径: $WS_PATH"
    echo "有效期至: $expire_date"
    echo "统计文件: $STATS_FILE"
    echo "NPS输出文件: $NPS_OUTPUT_FILE"
}

main() {
    [ -x "$(command -v xrayL)" ] || install_xray
    if [ $# -ge 1 ]; then
        config_type="$1"
    else
        read -p "选择节点类型 (socks/vmess): " config_type
    fi
    config_type=${config_type:-"socks"}
    
    case "$config_type" in
        socks|vmess)
            config_xray "$config_type"
            ;;
        *)
            echo "无效类型！使用默认socks配置"
            config_xray "socks"
            ;;
    esac
}

main "$@"
